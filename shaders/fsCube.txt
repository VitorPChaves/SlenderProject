		#version 330 core
		out vec4 FragColor;


		struct Material {
			sampler2D diffuse;
			sampler2D specular;
			sampler2D emission;
			float shininess;
		};

		struct Light {
			vec3 position;
			vec3 direction;
			float cutOff;
			float outerCutOff;

			vec3 ambient;
			vec3 diffuse;
			vec3 specular;

			float constant;
			float linear;
			float quadratic;

		
		};

		in vec3 Normal;
		in vec3 FragPos;
		in vec2 TexCoord;
		
		uniform vec3 viewPos;

		uniform Material material;
		uniform Light light;
		uniform float time;

		void main()
		{
			// ambient
			vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoord));	

			
			// diffuse
			vec3 norm = normalize(Normal);
			vec3 lightDir = normalize(light.position - FragPos);
			float diff = max(dot(norm, lightDir), 0.0);
			vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoord));

			
			// specular
			vec3 viewDir = normalize(viewPos - FragPos);
			vec3 reflectDir = reflect(-lightDir, norm);
			float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
			vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoord));


			// emission
			vec3 emission = vec3(0.0);
			if (texture(material.specular, TexCoord).r == 0.0)
			{
				emission = texture(material.emission, TexCoord).rgb;
				emission = texture(material.emission, TexCoord + vec2(0.0, time)).rgb;
				emission = emission * (sin(time) * 0.5 + 0.5) * 2.0;
			}


			// theta
			float theta = dot(lightDir, normalize(-light.direction));
			float epsilon = light.cutOff - light.outerCutOff;
			float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
			diffuse *= intensity;
			specular *= intensity;


			// Point light
			float distance = length(light.position - FragPos);
			float attenuation = 1.0 / (light.constant + light.linear + light.quadratic * (distance * distance));
			ambient *= attenuation;
			diffuse *= attenuation;
			specular *= attenuation;

        
			vec3 result = ambient + diffuse + specular;

			
			FragColor = vec4(result, 1.0);
			
			
		}